version: 2
jobs:
  build:
    working_directory: ~/aerogear
    docker:
      # Node 8 LTS
      - image: circleci/node:lts-browsers
    steps:
      - checkout
      - run:
          name: update-npm
          command: 'sudo npm install -g npm@latest'
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - run:
          name: install-dependencies
          command: npm install
      - run:
          name: install-package-dependencies
          command: npm run bootstrap
      - run:
          name: run-build
          command: npm run build
      - save_cache:
          key: dependency-cache-{{ checksum "package.json" }}
          paths:
            - ./node_modules
      - run:
          # Hoisting will cache some of the packages, but rest needs to be installed separtely
          name: install-package-dependencies-after-cache
          command: npm run bootstrap
      - run:
          name: run lint
          command: npm run lint
      - run:
          name: test
          command: npm test
      - run:
          name: coverage
          command: npm run coverage
      - run:
          name: sync integration test
          command: cd packages/sync && npm run integration-test
      - store_artifacts:
          path: test-results.xml
          prefix: tests
      - store_artifacts:
          path: coverage
          prefix: coverage
      - store_test_results:
          path: test-results.xml
  npm_publish:
    working_directory: ~/aerogear
    docker:
      # Node 8 LTS
      - image: circleci/node:lts
    steps:
      - checkout
        # Allows us to authenticate with the npm registry
      - run: echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" > ~/.npmrc
      - run: CI=true npm run release:prep
      - run: TAG=$CIRCLE_TAG npm run release:validate
      - run: TAG=$CIRCLE_TAG npm run publish
  build_test_app_android:
    working_directory: ~/aerogear
    docker:
      - image: circleci/android:api-28-node
      - image: verdaccio/verdaccio
        name: verdaccio_instance
    steps:
      - checkout
        # publish npm packages to local verdaccio instance for testing
      - run: npm set registry http://verdaccio_instance:4873/
      - run: npx npm-cli-login -u test -p test -e test@example.com -r http://verdaccio_instance:4873
      - run: git config --global user.email "test@example.com"
      - run: git config --global user.name "test"
      - run: npx lerna version prerelease --no-push --yes
      - run: CI=true npm run release:prep
      - run:
          command: |
            TAG=$(node -e "console.log(require('./lerna.json').version);") \
            npm run release:validate
      - run:
          command: |
            TAG=$(node -e "console.log(require('./lerna.json').version);") \
            npm run publish
        # build cordova testing app
      - run:
          command: git clone https://github.com/jhellar/aerogear-integration-tests.git .
          working_directory: ~/tests
      - run:
          name: Install gradle
          command: sudo apt install gradle
      - run:
          name: Install cordova
          command: sudo npm --global install cordova@8
      - run:
          name: Create cordova app
          command: cordova create testing-app
          working_directory: ~/tests
      - run:
          name: Copy fixtures
          command: |
            cp fixtures/config.xml testing-app/
            cp fixtures/index.html testing-app/www/
            cp fixtures/webpack.config.js testing-app/
            cp fixtures/index.js testing-app/
          working_directory: ~/tests
      - run:
          name: Install dependencies
          command: |
            npm install --save \
              @aerogear/security \
              @aerogear/app \
              @aerogear/auth \
              webpack \
              webpack-cli && \
            cat package.json
          working_directory: ~/tests/testing-app
      - run:
          name: Install cordova plugins
          command: |
            cordova plugin add @aerogear/cordova-plugin-aerogear-security && \
            cordova plugin add cordova-plugin-inappbrowser
          working_directory: ~/tests/testing-app
      - run:
          name: Webpack build
          command: npx webpack
          working_directory: ~/tests/testing-app
      - run:
          name: Add Android platform
          command: cordova platform add android
          working_directory: ~/tests/testing-app
      - run:
          name: Build android app
          command: cordova build android
          working_directory: ~/tests/testing-app
      - persist_to_workspace:
          root: ~/tests/testing-app/platforms/android/app/build/outputs/apk/debug/
          paths:
            - app-debug.apk
      - run: echo stop && false

workflows:
  version: 2
  build_and_release:
    jobs:
      - build:
          requires:
            - build_test_app_android
          filters:
            tags:
              only: /.*/
      - build_test_app_android:
          # requires:
          #   - build
          filters:
            tags:
              only: /.*/
      - npm_publish:
          requires:
            - build_test_app_android
          filters:
            tags:
              only: /.*/ # allow anything because tag syntax is validated as part of validate-release.sh
            branches:
              ignore: /.*/
